import java.io.IOException;
import java.util.Iterator;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.MapWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapred.FileInputFormat;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;
import org.elasticsearch.hadoop.mr.EsInputFormat;
import org.elasticsearch.hadoop.mr.WritableArrayWritable;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
 
public class HadoopDataReader extends Configured implements Tool{
    Logger logger = LoggerFactory.getLogger(HadoopDataReader.class);
 
	private static class MarketingDataInputMapper extends Mapper<Object, Object, Text, IntWritable>{
	    Logger logger = LoggerFactory.getLogger(MarketingDataInputMapper.class);
	    private static final IntWritable ONE = new IntWritable(1);
 
		@Override
		protected void map(Object key, Object value,
				Mapper<Object, Object, Text, IntWritable>.Context context)
				throws IOException, InterruptedException {
			logger.debug("Entering MRInputDriver.map()");
			Text documentId = (Text)key;
			MapWritable valueMap = (MapWritable)value;
			
			
			//WritableArrayWritable address =(WritableArrayWritable) valueMap.get(new Text("address"));
			//MapWritable addressMap = (MapWritable)address.get()[0];
			//Text city = (Text)addressMap.get(new Text("city"));
			
			Text key1 = (Text) valueMap.get(new Text("jobName"));
			System.out.println(" Key : "+key1);
			if(key1 != null) {
				context.write(key1, ONE);
			}
			
			logger.debug("Exiting MRInputDriver.map()");;
		}
	}
 
	private static class MarketingDataInputReducer extends Reducer<Text, IntWritable, Text, IntWritable>{
 
	    Logger logger = LoggerFactory.getLogger(MarketingDataInputReducer.class);
		
		@Override
		protected void reduce(Text key, Iterable<IntWritable> values,
				Reducer<Text, IntWritable, Text, IntWritable>.Context context)
				throws IOException, InterruptedException {
			
			logger.debug("Entering MarketingDataInputReducer.reduce()");
			
			int sum = 0;
	        Iterator<IntWritable> valuesIt = values.iterator();
	        while(valuesIt.hasNext()){
	            sum = sum + valuesIt.next().get();
	        }
	        logger.debug(key + " -> " + sum);
			System.out.println("Key : " + key + "," + "Value : "+ new IntWritable(sum));
			context.write(key, new IntWritable(sum));
			logger.debug("Exiting MarketingDataInputReducer.reduce()");;
		}
	}
	
	public int run(String[] args) throws Exception {
		logger.debug("Entering MarketingDataAnalyzer.run()");
		if (args.length != 2) {
            System.err.printf("Usage: %s [generic options] <input> <output>\n",
                    getClass().getSimpleName());
            ToolRunner.printGenericCommandUsage(System.err);
            return -1;
        }
 
        logger.info("Input path " + args[0]);
        logger.info("Output path " + args[1]);
 
        Configuration configuration = new Configuration();
        configuration.set("es.nodes","<ES_CLUSTER_1>");
        configuration.set("es.resource",args[0]);
        configuration.set("es.port","9200");
        
        Job job = new Job(configuration);
        job.setJarByClass(HadoopDataReader.class);
        job.setJobName("JobDataAnalyzer");
        job.setInputFormatClass(EsInputFormat.class);
        
     // FileInputFormat.setInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));
   
        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(IntWritable.class);
        
        job.setMapperClass(JobDataInputMapper.class);
        job.setReducerClass(JobDataInputReducer.class);
 
        int returnValue = job.waitForCompletion(true) ? 0:1;
        String status = job.isSuccessful() ? "Job is Successful !" : "Job has Failed !";
        System.out.println(status);

		logger.debug("Exiting HadoopDataAnalyzer.run()");
		return returnValue;
	}
 
	public static void main(String[] args) throws Exception {
		String[] params = new String[]{"marketing/revenue", "output/a2" };
		
		int exitCode = ToolRunner.run(new HadoopDataReader(), params);
        System.exit(exitCode);
	}
 
}
